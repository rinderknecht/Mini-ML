(* Extended Backus-Naur Form (EBNF) for Mini-ML

   This is not a strict subset of OCaml because the "match" construct
   is closed here with the keyword "end".

   Terminal are either excerpts of concrete syntax between double
   quotes, e.g. ";", or start with a capital letter.

   Non-terminals start with a small letter.

   {non_terminal TERMINAL ...}+ : A non-empty sequence of
                                  non-terminal separated by a terminal

   {non_terminal TERMINAL ...}* : A possibly empty sequence of
                                  non-terminals separated by terminal

   non_terminal+                : A non-empty sequence of non-terminals

   non_terminal*                : A possibly empty sequence of non-terminals
*)

program ::= statement* EOF

statement ::=
  "let"       let_bindings
| "let" "rec" let_rec_bindings

(* Recursive definitions *)

let_rec_bindings ::= {let_rec_binding "and" ...}+

let_rec_binding ::=
  Ident pattern+ "=" expr
| Ident          "=" fun_expr

(* Non-recursive definitions *)

let_bindings ::= {let_binding "and" ...}+

let_binding ::=
  Ident pattern+ "=" expr
| let_lhs        "=" expr

(* Patterns *)

let_lhs ::=
  pattern cons cons_pat
| {pattern "," ...}+
| common_pattern

common_pattern ::=
  Ident
| "_"
| "()"
| Int
| "true"
| "false"
| String
| "[" {cons_pat ";" ...}* "]"
| "(" ptuple ")"

ptuple ::= {cons_pat "," ...}+

unit ::= "(" ")"

cons_pat ::=
  pattern "::" cons_pat
| pattern

pattern ::=
  "(" cons_pat ")"
| common_pattern

(* Expressions *)

expr ::=
  let_expr
| conditional
| fun_expr
| match_expr
| {disj_expr "," ...}+

match_expr ::=
  "match" expr "with" {case "|" ...}+ "end"

case ::=
  let_lhs "->" expr

let_expr ::=
  "let"       let_bindings     "in" expr
| "let" "rec" let_rec_bindings "in" expr

conditional ::= "if" expr "then" expr "else" expr

fun_expr ::= "fun" pattern+ "->" expr

disj_expr ::=
  disj_expr "||" conj_expr
| conj_expr

conj_expr ::=
  conj_expr "&&" comp_expr
| comp_expr

comp_expr ::=
  comp_expr "<"  cat_expr
| comp_expr "<=" cat_expr
| comp_expr ">"  cat_expr
| comp_expr ">=" cat_expr
| comp_expr "="  cat_expr
| comp_expr "<>" cat_expr
| cat_expr

cat_expr ::=
  cons_expr "^" cat_expr
| cons_expr

cons_expr ::=
  add_expr "::" cons_expr
| add_expr

add_expr ::=
  add_expr "+" mult_expr
| add_expr "-" mult_expr
| mult_expr

mult_expr ::=
  mult_expr "*"   unary_expr
| mult_expr "div" unary_expr
| mult_expr "mod" unary_expr
| unary_expr

unary_expr ::=
  "-" core_expr
| "not" core_expr
| primary_expr

primary_expr ::=
  primary_expr core_expr
| core_expr

core_expr ::=
  Int
| Ident
| String
| "()"
| "false"
| "true"
| "[" {expr ";" ...}* "]"
| "(" expr ")"
